# Руководство по стилю кода для Unity C#

Цель: **читаемый, предсказуемый код**, где имена и оформление сразу дают контекст.

---

## 1. Общие принципы
- **Читаемость важнее краткости.** Лучше немного больше букв в имени, чем читать код с подглядыванием в контекст.  
- **Единообразие.** Все должны соблюдать одинаковые правила форматирования и имен.  
- **Следуем .NET/C# и Unity.** Но адаптируем под Unity-проекты (атрибуты, сериализация и т.п.).  
- **Имена должны передавать контекст.** Не `Loader`, а `PlayerProfileLoaderFromRemote`.  
- **Минимум скрытых побочных эффектов.** Имя метода должно давать представление о побочных эффектах.

---

## 2. Форматирование кода

### 2.1 Отступы и пробелы
- Отступы — 4 пробела, без табов.  
- Пробелы вокруг операторов и после запятой: `int x = 5;`, `Foo(bar, baz)`.  
- Одна пустая строка между методами/свойствами.  
- Пустая строка перед `#region` и после `#endregion`.  
- Пустые строки для логических блоков.

**Пример:**
```csharp
public class Example
{
    private int _value;

    public void Do()
    {
        var a = 1;

        if (condition)
        {
            DoSomething();
        }
    }

    #region Properties

    public int Value => _value;

    #endregion
}
```

### 2.2 Длина строки
-Максимум ~120 символов.

Переносим длинные аргументы и выражения:
```csharp
var result = SomeLongMethodName(
    firstArgument,
    secondArgument,
    thirdArgument
);

if (firstCondition && secondCondition 
    || thirdCondition)
{
    // ...
}
```
### 2.3 Скобки и переносы
- Открывающая фигурная скобка на той же строке.
- Закрывающая — на отдельной строке.

```csharp
if (condition)
{
    // ...
}
else
{
    // ...
}
```
